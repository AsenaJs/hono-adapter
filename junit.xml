<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="bun test" tests="205" assertions="465" failures="0" skipped="0" time="0.355272948">
  <testsuite name="test/CorsMiddleware.test.ts" file="test/CorsMiddleware.test.ts" tests="21" assertions="63" failures="0" skipped="0" time="0" hostname="Duffy">
    <testsuite name="CorsMiddleware" file="test/CorsMiddleware.test.ts" line="6" tests="21" assertions="63" failures="0" skipped="0" time="0" hostname="Duffy">
      <testsuite name="Constructor and Default Options" file="test/CorsMiddleware.test.ts" line="30" tests="2" assertions="2" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should create middleware with default options" classname="Constructor and Default Options &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="31" assertions="1" />
        <testcase name="should create middleware with custom options" classname="Constructor and Default Options &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="37" assertions="1" />
      </testsuite>
      <testsuite name="No Origin Header (Skip CORS)" file="test/CorsMiddleware.test.ts" line="49" tests="1" assertions="2" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should skip CORS processing when no Origin header present" classname="No Origin Header (Skip CORS) &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="50" assertions="2" />
      </testsuite>
      <testsuite name="Origin Validation - Wildcard (*)" file="test/CorsMiddleware.test.ts" line="62" tests="2" assertions="4" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should allow all origins with wildcard setting" classname="Origin Validation - Wildcard (*) &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="63" assertions="2" />
        <testcase name="should allow any origin with wildcard" classname="Origin Validation - Wildcard (*) &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="74" assertions="2" />
      </testsuite>
      <testsuite name="Origin Validation - Array of Origins" file="test/CorsMiddleware.test.ts" line="86" tests="2" assertions="6" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should allow requests from allowed origin" classname="Origin Validation - Array of Origins &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="87" assertions="2" />
        <testcase name="should block requests from non-allowed origin" classname="Origin Validation - Array of Origins &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="100" assertions="4" />
      </testsuite>
      <testsuite name="Origin Validation - Function" file="test/CorsMiddleware.test.ts" line="119" tests="2" assertions="5" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should use function to validate origin (allowed)" classname="Origin Validation - Function &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="120" assertions="2" />
        <testcase name="should use function to validate origin (blocked)" classname="Origin Validation - Function &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="133" assertions="3" />
      </testsuite>
      <testsuite name="Preflight OPTIONS Request" file="test/CorsMiddleware.test.ts" line="148" tests="3" assertions="14" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should handle preflight OPTIONS request with default headers" classname="Preflight OPTIONS Request &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="149" assertions="8" />
        <testcase name="should handle preflight with custom methods and headers" classname="Preflight OPTIONS Request &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="169" assertions="4" />
        <testcase name="should include credentials header in preflight when enabled" classname="Preflight OPTIONS Request &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="190" assertions="2" />
      </testsuite>
      <testsuite name="Actual Requests (Non-OPTIONS)" file="test/CorsMiddleware.test.ts" line="208" tests="4" assertions="8" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should set CORS headers for GET request" classname="Actual Requests (Non-OPTIONS) &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="209" assertions="2" />
        <testcase name="should set CORS headers for POST request" classname="Actual Requests (Non-OPTIONS) &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="220" assertions="2" />
        <testcase name="should include credentials header when enabled" classname="Actual Requests (Non-OPTIONS) &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="231" assertions="2" />
        <testcase name="should include exposed headers when configured" classname="Actual Requests (Non-OPTIONS) &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="245" assertions="2" />
      </testsuite>
      <testsuite name="Edge Cases" file="test/CorsMiddleware.test.ts" line="263" tests="3" assertions="12" failures="0" skipped="0" time="0.001" hostname="Duffy">
        <testcase name="should handle empty exposedHeaders array" classname="Edge Cases &amp;gt; CorsMiddleware" time="0.001" file="test/CorsMiddleware.test.ts" line="264" assertions="2" />
        <testcase name="should handle multiple origins in array" classname="Edge Cases &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="282" assertions="8" />
        <testcase name="should not set credentials header when credentials is false" classname="Edge Cases &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="303" assertions="2" />
      </testsuite>
      <testsuite name="Complex Scenarios" file="test/CorsMiddleware.test.ts" line="322" tests="2" assertions="10" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should handle request with all CORS features enabled" classname="Complex Scenarios &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="323" assertions="4" />
        <testcase name="should handle complex origin validation function" classname="Complex Scenarios &amp;gt; CorsMiddleware" time="0" file="test/CorsMiddleware.test.ts" line="347" assertions="6" />
      </testsuite>
    </testsuite>
  </testsuite>
  <testsuite name="test/HonoContextWrapper.test.ts" file="test/HonoContextWrapper.test.ts" tests="31" assertions="48" failures="0" skipped="0" time="0" hostname="Duffy">
    <testsuite name="HonoContextWrapper" file="test/HonoContextWrapper.test.ts" line="5" tests="31" assertions="48" failures="0" skipped="0" time="0" hostname="Duffy">
      <testsuite name="Constructor and Basic Getters" file="test/HonoContextWrapper.test.ts" line="42" tests="3" assertions="7" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should create a wrapper instance and provide access to context properties" classname="Constructor and Basic Getters &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="43" assertions="3" />
        <testcase name="should get headers correctly" classname="Constructor and Basic Getters &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="54" assertions="2" />
        <testcase name="should get and set context directly" classname="Constructor and Basic Getters &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="64" assertions="2" />
      </testsuite>
      <testsuite name="Request Body Methods" file="test/HonoContextWrapper.test.ts" line="77" tests="5" assertions="12" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should get array buffer" classname="Request Body Methods &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="78" assertions="3" />
        <testcase name="should get parsed body" classname="Request Body Methods &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="89" assertions="2" />
        <testcase name="should get blob" classname="Request Body Methods &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="99" assertions="2" />
        <testcase name="should get form data" classname="Request Body Methods &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="109" assertions="3" />
        <testcase name="should get JSON body" classname="Request Body Methods &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="120" assertions="2" />
      </testsuite>
      <testsuite name="Parameters and Query" file="test/HonoContextWrapper.test.ts" line="131" tests="3" assertions="6" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should get a parameter by name" classname="Parameters and Query &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="132" assertions="2" />
        <testcase name="should get single query parameter" classname="Parameters and Query &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="142" assertions="2" />
        <testcase name="should get all query parameters" classname="Parameters and Query &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="152" assertions="2" />
      </testsuite>
      <testsuite name="Response Methods - send()" file="test/HonoContextWrapper.test.ts" line="163" tests="5" assertions="6" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should send string data correctly" classname="Response Methods - send() &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="164" assertions="1" />
        <testcase name="should send JSON data correctly" classname="Response Methods - send() &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="173" assertions="1" />
        <testcase name="should send JSON with custom status code" classname="Response Methods - send() &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="184" assertions="1" />
        <testcase name="should send JSON with SendOptions" classname="Response Methods - send() &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="195" assertions="2" />
        <testcase name="should send with empty headers when headers is undefined in SendOptions" classname="Response Methods - send() &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="208" assertions="1" />
      </testsuite>
      <testsuite name="Response Methods - html()" file="test/HonoContextWrapper.test.ts" line="220" tests="3" assertions="3" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should send HTML content correctly" classname="Response Methods - html() &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="221" assertions="1" />
        <testcase name="should send HTML with custom status code" classname="Response Methods - html() &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="232" assertions="1" />
        <testcase name="should send HTML with SendOptions" classname="Response Methods - html() &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="243" assertions="1" />
      </testsuite>
      <testsuite name="Context Value Management" file="test/HonoContextWrapper.test.ts" line="256" tests="2" assertions="4" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should get and set context values" classname="Context Value Management &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="257" assertions="2" />
        <testcase name="should set and get WebSocket values" classname="Context Value Management &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="268" assertions="2" />
      </testsuite>
      <testsuite name="Redirect" file="test/HonoContextWrapper.test.ts" line="284" tests="2" assertions="2" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should redirect correctly" classname="Redirect &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="285" assertions="1" />
        <testcase name="should redirect to external URL" classname="Redirect &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="294" assertions="1" />
      </testsuite>
      <testsuite name="Cookie Management" file="test/HonoContextWrapper.test.ts" line="304" tests="8" assertions="8" failures="0" skipped="0" time="0.003" hostname="Duffy">
        <testcase name="should get unsigned cookie" classname="Cookie Management &amp;gt; HonoContextWrapper" time="0.001" file="test/HonoContextWrapper.test.ts" line="323" assertions="1" />
        <testcase name="should get signed cookie with secret" classname="Cookie Management &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="332" assertions="1" />
        <testcase name="should set unsigned cookie" classname="Cookie Management &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="344" assertions="1" />
        <testcase name="should set signed cookie with secret" classname="Cookie Management &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="353" assertions="1" />
        <testcase name="should set cookie with options" classname="Cookie Management &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="364" assertions="1" />
        <testcase name="should delete unsigned cookie" classname="Cookie Management &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="380" assertions="1" />
        <testcase name="should delete cookie with options" classname="Cookie Management &amp;gt; HonoContextWrapper" time="0.002" file="test/HonoContextWrapper.test.ts" line="389" assertions="1" />
        <testcase name="should handle cookie operations without options" classname="Cookie Management &amp;gt; HonoContextWrapper" time="0" file="test/HonoContextWrapper.test.ts" line="403" assertions="1" />
      </testsuite>
    </testsuite>
  </testsuite>
  <testsuite name="test/HonoAdapter.test.ts" file="test/HonoAdapter.test.ts" tests="73" assertions="189" failures="0" skipped="0" time="0" hostname="Duffy">
    <testsuite name="HonoAdapter" file="test/HonoAdapter.test.ts" line="19" tests="73" assertions="189" failures="0" skipped="0" time="0.002" hostname="Duffy">
      <testcase name="should create an adapter instance" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="21" assertions="3" />
      <testcase name="should register middleware correctly" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="32" assertions="2" />
      <testcase name="should queue routes for deferred registration" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="50" assertions="2" />
      <testcase name="should set port correctly" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="72" assertions="1" />
      <testcase name="should register an error handler" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="82" assertions="1" />
      <testcase name="should queue CONNECT method route" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="96" assertions="2" />
      <testcase name="should queue HEAD method route" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="115" assertions="2" />
      <testcase name="should queue TRACE method route" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="134" assertions="2" />
      <testcase name="should queue POST method route" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="153" assertions="2" />
      <testcase name="should queue PUT method route" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="172" assertions="2" />
      <testcase name="should queue DELETE method route" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="191" assertions="2" />
      <testcase name="should queue PATCH method route" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="210" assertions="2" />
      <testcase name="should queue OPTIONS method route" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="229" assertions="2" />
      <testcase name="should register global middleware without config" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="248" assertions="3" />
      <testcase name="should register WebSocket route" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="267" assertions="2" />
      <testcase name="should register WebSocket route with middlewares" classname="HonoAdapter" time="0.001" file="test/HonoAdapter.test.ts" line="291" assertions="3" />
      <testcase name="should register route group" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="319" assertions="2" />
      <testcase name="should set serve options with async function" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="341" assertions="1" />
      <testcase name="should set serve options with sync function" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="363" assertions="1" />
      <testcase name="should register route with middlewares" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="382" assertions="2" />
      <testcase name="should create default websocket adapter when none provided" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="409" assertions="2" />
      <testcase name="should set logger on websocket adapter if not set" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="418" assertions="2" />
      <testcase name="should register static serve route" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="429" assertions="2" />
      <testcase name="should register static serve with custom mimes" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="450" assertions="2" />
      <testcase name="should register static serve with precompressed option" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="480" assertions="2" />
      <testcase name="should register static serve with onFound handler" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="504" assertions="2" />
      <testcase name="should register static serve with onFound override" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="531" assertions="2" />
      <testcase name="should register static serve with onNotFound handler" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="558" assertions="2" />
      <testcase name="should register static serve with onNotFound override" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="585" assertions="2" />
      <testcase name="should register static serve with custom cache control" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="612" assertions="2" />
      <testcase name="should register static serve with custom headers" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="636" assertions="2" />
      <testcase name="should register static serve with rewriteRequestPath" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="666" assertions="2" />
      <testcase name="should register route with body validation" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="688" assertions="2" />
      <testcase name="should register route with validation schema and hook" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="721" assertions="2" />
      <testcase name="should register route with query validation" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="754" assertions="2" />
      <testcase name="should register route with param validation" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="785" assertions="2" />
      <testcase name="should register route with header validation" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="815" assertions="2" />
      <testcase name="should register route with cookie validation" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="845" assertions="2" />
      <testcase name="should register route with multiple validation targets" classname="HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="875" assertions="2" />
      <testcase name="should register route without validator" classname="HonoAdapter" time="0.001" file="test/HonoAdapter.test.ts" line="908" assertions="1" />
      <testsuite name="Controller-Based Logging" file="test/HonoAdapter.test.ts" line="928" tests="6" assertions="17" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should group HTTP routes by controller name" classname="Controller-Based Logging &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="929" assertions="4" />
        <testcase name="should group WebSocket routes by controller name" classname="Controller-Based Logging &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="965" assertions="4" />
        <testcase name="should sort routes by method in correct order" classname="Controller-Based Logging &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="995" assertions="3" />
        <testcase name="should merge HTTP and WebSocket routes for same controller" classname="Controller-Based Logging &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1048" assertions="3" />
        <testcase name="should handle controllers sorted alphabetically" classname="Controller-Based Logging &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1084" assertions="2" />
        <testcase name="should handle unknown controller name" classname="Controller-Based Logging &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1121" assertions="1" />
      </testsuite>
      <testsuite name="Pattern-Based Global Middlewares" file="test/HonoAdapter.test.ts" line="1145" tests="9" assertions="41" failures="0" skipped="0" time="0.001" hostname="Duffy">
        <testcase name="should register global middleware with include patterns" classname="Pattern-Based Global Middlewares &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1146" assertions="2" />
        <testcase name="should register global middleware with exclude patterns" classname="Pattern-Based Global Middlewares &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1165" assertions="2" />
        <testcase name="should register global middleware with mixed include/exclude patterns" classname="Pattern-Based Global Middlewares &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1184" assertions="2" />
        <testcase name="should filter global middlewares correctly for specific paths" classname="Pattern-Based Global Middlewares &amp;gt; HonoAdapter" time="0.001" file="test/HonoAdapter.test.ts" line="1205" assertions="20" />
        <testcase name="should apply global middlewares to routes during registration" classname="Pattern-Based Global Middlewares &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1279" assertions="3" />
        <testcase name="should handle wildcard patterns correctly" classname="Pattern-Based Global Middlewares &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1320" assertions="3" />
        <testcase name="should handle exact match patterns correctly" classname="Pattern-Based Global Middlewares &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1348" assertions="3" />
        <testcase name="should handle multiple global middlewares in correct order" classname="Pattern-Based Global Middlewares &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1376" assertions="4" />
        <testcase name="should apply global middlewares to WebSocket routes" classname="Pattern-Based Global Middlewares &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1409" assertions="2" />
      </testsuite>
      <testsuite name="Deferred Route Registration" file="test/HonoAdapter.test.ts" line="1435" tests="8" assertions="15" failures="0" skipped="0" time="0.004" hostname="Duffy">
        <testcase name="should extract base path correctly" classname="Deferred Route Registration &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1436" assertions="5" />
        <testcase name="should group routes by base path" classname="Deferred Route Registration &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1447" assertions="3" />
        <testcase name="should extract common middlewares" classname="Deferred Route Registration &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1487" assertions="1" />
        <testcase name="should not find common middlewares when routes differ" classname="Deferred Route Registration &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1526" assertions="1" />
        <testcase name="should return empty array for single route" classname="Deferred Route Registration &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1575" assertions="1" />
        <testcase name="should register routes on start" classname="Deferred Route Registration &amp;gt; HonoAdapter" time="0.002" file="test/HonoAdapter.test.ts" line="1595" assertions="1" />
        <testcase name="should handle routes with no common middleware" classname="Deferred Route Registration &amp;gt; HonoAdapter" time="0.001" file="test/HonoAdapter.test.ts" line="1637" assertions="1" />
        <testcase name="should register routes only once on multiple start calls" classname="Deferred Route Registration &amp;gt; HonoAdapter" time="0.001" file="test/HonoAdapter.test.ts" line="1682" assertions="2" />
      </testsuite>
      <testsuite name="HTTPException Handling" file="test/HonoAdapter.test.ts" line="1716" tests="10" assertions="38" failures="0" skipped="0" time="0.001" hostname="Duffy">
        <testcase name="should handle HTTPException with proper status code" classname="HTTPException Handling &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1717" assertions="1" />
        <testcase name="should call HTTPException getResponse() for default behavior" classname="HTTPException Handling &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1737" assertions="2" />
        <testcase name="should allow user to customize HTTPException response" classname="HTTPException Handling &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1755" assertions="1" />
        <testcase name="should use HTTPException default response when user handler throws" classname="HTTPException Handling &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1784" assertions="1" />
        <testcase name="should preserve HTTPException status codes (401, 403, 404, etc.)" classname="HTTPException Handling &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1799" assertions="20" />
        <testcase name="should handle HTTPException with custom response object" classname="HTTPException Handling &amp;gt; HonoAdapter" time="0.001" file="test/HonoAdapter.test.ts" line="1822" assertions="4" />
        <testcase name="should handle normal errors through user handler" classname="HTTPException Handling &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1841" assertions="2" />
        <testcase name="should log errors before handling" classname="HTTPException Handling &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1866" assertions="1" />
        <testcase name="should handle HTTPException in middleware context" classname="HTTPException Handling &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1879" assertions="3" />
        <testcase name="should export HTTPException for user middlewares" classname="HTTPException Handling &amp;gt; HonoAdapter" time="0" file="test/HonoAdapter.test.ts" line="1889" assertions="3" />
      </testsuite>
    </testsuite>
  </testsuite>
  <testsuite name="test/middlewareParser.test.ts" file="test/middlewareParser.test.ts" tests="18" assertions="35" failures="0" skipped="0" time="0" hostname="Duffy">
    <testsuite name="middlewareParser" file="test/middlewareParser.test.ts" line="7" tests="18" assertions="35" failures="0" skipped="0" time="0" hostname="Duffy">
      <testsuite name="Basic Middleware Parsing" file="test/middlewareParser.test.ts" line="35" tests="3" assertions="6" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should parse a single middleware" classname="Basic Middleware Parsing &amp;gt; middlewareParser" time="0" file="test/middlewareParser.test.ts" line="36" assertions="3" />
        <testcase name="should parse multiple middlewares" classname="Basic Middleware Parsing &amp;gt; middlewareParser" time="0" file="test/middlewareParser.test.ts" line="51" assertions="1" />
        <testcase name="should return empty array for empty middlewares" classname="Basic Middleware Parsing &amp;gt; middlewareParser" time="0" file="test/middlewareParser.test.ts" line="72" assertions="2" />
      </testsuite>
      <testsuite name="Normal Middleware Execution" file="test/middlewareParser.test.ts" line="80" tests="3" assertions="5" failures="0" skipped="0" time="0.001" hostname="Duffy">
        <testcase name="should execute middleware with context wrapper" classname="Normal Middleware Execution &amp;gt; middlewareParser" time="0.001" file="test/middlewareParser.test.ts" line="81" assertions="3" />
        <testcase name="should call next when middleware completes" classname="Normal Middleware Execution &amp;gt; middlewareParser" time="0" file="test/middlewareParser.test.ts" line="102" assertions="1" />
        <testcase name="should handle middleware without explicit next() call" classname="Normal Middleware Execution &amp;gt; middlewareParser" time="0" file="test/middlewareParser.test.ts" line="119" assertions="1" />
      </testsuite>
      <testsuite name="Context Wrapper Reuse" file="test/middlewareParser.test.ts" line="138" tests="2" assertions="5" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should create new context wrapper when not exists" classname="Context Wrapper Reuse &amp;gt; middlewareParser" time="0" file="test/middlewareParser.test.ts" line="139" assertions="3" />
        <testcase name="should reuse existing context wrapper" classname="Context Wrapper Reuse &amp;gt; middlewareParser" time="0" file="test/middlewareParser.test.ts" line="158" assertions="2" />
      </testsuite>
      <testsuite name="Override Middleware" file="test/middlewareParser.test.ts" line="190" tests="2" assertions="4" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should pass raw Hono context to override middleware" classname="Override Middleware &amp;gt; middlewareParser" time="0" file="test/middlewareParser.test.ts" line="191" assertions="3" />
        <testcase name="should not create context wrapper for override middleware" classname="Override Middleware &amp;gt; middlewareParser" time="0" file="test/middlewareParser.test.ts" line="215" assertions="1" />
      </testsuite>
      <testsuite name="Pipeline Control" file="test/middlewareParser.test.ts" line="234" tests="3" assertions="4" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should stop pipeline when middleware returns false" classname="Pipeline Control &amp;gt; middlewareParser" time="0" file="test/middlewareParser.test.ts" line="235" assertions="2" />
        <testcase name="should continue pipeline when middleware returns true" classname="Pipeline Control &amp;gt; middlewareParser" time="0" file="test/middlewareParser.test.ts" line="254" assertions="1" />
        <testcase name="should continue pipeline when middleware returns undefined" classname="Pipeline Control &amp;gt; middlewareParser" time="0" file="test/middlewareParser.test.ts" line="272" assertions="1" />
      </testsuite>
      <testsuite name="Error Handling" file="test/middlewareParser.test.ts" line="291" tests="2" assertions="2" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should propagate errors from middleware" classname="Error Handling &amp;gt; middlewareParser" time="0" file="test/middlewareParser.test.ts" line="292" assertions="1" />
        <testcase name="should handle errors in override middleware" classname="Error Handling &amp;gt; middlewareParser" time="0" file="test/middlewareParser.test.ts" line="308" assertions="1" />
      </testsuite>
      <testsuite name="Complex Scenarios" file="test/middlewareParser.test.ts" line="325" tests="3" assertions="9" failures="0" skipped="0" time="0.001" hostname="Duffy">
        <testcase name="should handle middleware chain correctly" classname="Complex Scenarios &amp;gt; middlewareParser" time="0" file="test/middlewareParser.test.ts" line="326" assertions="1" />
        <testcase name="should handle mix of override and normal middlewares" classname="Complex Scenarios &amp;gt; middlewareParser" time="0" file="test/middlewareParser.test.ts" line="362" assertions="5" />
        <testcase name="should maintain context data across middlewares" classname="Complex Scenarios &amp;gt; middlewareParser" time="0.001" file="test/middlewareParser.test.ts" line="393" assertions="3" />
      </testsuite>
    </testsuite>
  </testsuite>
  <testsuite name="test/integration.test.ts" file="test/integration.test.ts" tests="13" assertions="39" failures="0" skipped="0" time="0" hostname="Duffy">
    <testsuite name="Integration Tests" file="test/integration.test.ts" line="16" tests="7" assertions="23" failures="0" skipped="0" time="0.005" hostname="Duffy">
      <testcase name="should respond to GET /health" classname="Integration Tests" time="0.002" file="test/integration.test.ts" line="89" assertions="2" />
      <testcase name="should echo POST body" classname="Integration Tests" time="0.001" file="test/integration.test.ts" line="97" assertions="2" />
      <testcase name="should return 404 for non-existent routes" classname="Integration Tests" time="0" file="test/integration.test.ts" line="110" assertions="1" />
      <testcase name="should handle errors gracefully" classname="Integration Tests" time="0" file="test/integration.test.ts" line="116" assertions="3" />
      <testcase name="should handle URL parameters" classname="Integration Tests" time="0" file="test/integration.test.ts" line="125" assertions="2" />
      <testcase name="should handle multiple concurrent requests" classname="Integration Tests" time="0.001" file="test/integration.test.ts" line="133" assertions="11" />
      <testcase name="should handle large JSON payloads" classname="Integration Tests" time="0.001" file="test/integration.test.ts" line="146" assertions="2" />
    </testsuite>
    <testsuite name="Route Grouping Tests - registerControllerRoutes" file="test/integration.test.ts" line="167" tests="6" assertions="16" failures="0" skipped="0" time="0.002" hostname="Duffy">
      <testcase name="should handle grouped route - GET /api/products" classname="Route Grouping Tests - registerControllerRoutes" time="0.001" file="test/integration.test.ts" line="256" assertions="3" />
      <testcase name="should handle grouped route with params - GET /api/products/:id" classname="Route Grouping Tests - registerControllerRoutes" time="0" file="test/integration.test.ts" line="265" assertions="3" />
      <testcase name="should handle grouped route - POST /api/products" classname="Route Grouping Tests - registerControllerRoutes" time="0" file="test/integration.test.ts" line="274" assertions="4" />
      <testcase name="should handle second route group - GET /api/orders" classname="Route Grouping Tests - registerControllerRoutes" time="0" file="test/integration.test.ts" line="289" assertions="2" />
      <testcase name="should apply controller middleware to all routes in group" classname="Route Grouping Tests - registerControllerRoutes" time="0" file="test/integration.test.ts" line="297" assertions="3" />
      <testcase name="should not apply controller middleware to routes outside group" classname="Route Grouping Tests - registerControllerRoutes" time="0.001" file="test/integration.test.ts" line="309" assertions="1" />
    </testsuite>
  </testsuite>
  <testsuite name="test/RateLimiterMiddleware.test.ts" file="test/RateLimiterMiddleware.test.ts" tests="23" assertions="56" failures="0" skipped="0" time="0" hostname="Duffy">
    <testsuite name="RateLimiterMiddleware" file="test/RateLimiterMiddleware.test.ts" line="6" tests="23" assertions="56" failures="0" skipped="0" time="0" hostname="Duffy">
      <testsuite name="Constructor and Default Options" file="test/RateLimiterMiddleware.test.ts" line="37" tests="3" assertions="3" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should create middleware with default options" classname="Constructor and Default Options &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="38" assertions="1" />
        <testcase name="should create middleware with custom options" classname="Constructor and Default Options &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="44" assertions="1" />
        <testcase name="should create middleware with custom key generator" classname="Constructor and Default Options &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="55" assertions="1" />
      </testsuite>
      <testsuite name="Basic Rate Limiting" file="test/RateLimiterMiddleware.test.ts" line="64" tests="4" assertions="15" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should allow request when bucket has tokens" classname="Basic Rate Limiting &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="65" assertions="1" />
        <testcase name="should block request when bucket is empty" classname="Basic Rate Limiting &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="75" assertions="6" />
        <testcase name="should set rate limit headers for allowed requests" classname="Basic Rate Limiting &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="100" assertions="3" />
        <testcase name="should set rate limit headers for blocked requests" classname="Basic Rate Limiting &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="112" assertions="5" />
      </testsuite>
      <testsuite name="Token Bucket Algorithm" file="test/RateLimiterMiddleware.test.ts" line="131" tests="2" assertions="5" failures="0" skipped="0" time="0.302" hostname="Duffy">
        <testcase name="should refill tokens over time" classname="Token Bucket Algorithm &amp;gt; RateLimiterMiddleware" time="0.1" file="test/RateLimiterMiddleware.test.ts" line="132" assertions="2" />
        <testcase name="should not exceed maximum capacity" classname="Token Bucket Algorithm &amp;gt; RateLimiterMiddleware" time="0.202001" file="test/RateLimiterMiddleware.test.ts" line="151" assertions="3" />
      </testsuite>
      <testsuite name="Custom Key Generator" file="test/RateLimiterMiddleware.test.ts" line="176" tests="1" assertions="2" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should use custom key generator based on user ID" classname="Custom Key Generator &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="177" assertions="2" />
      </testsuite>
      <testsuite name="Skip Predicate" file="test/RateLimiterMiddleware.test.ts" line="201" tests="2" assertions="5" failures="0" skipped="0" time="0.001" hostname="Duffy">
        <testcase name="should skip rate limiting based on predicate" classname="Skip Predicate &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="202" assertions="4" />
        <testcase name="should skip rate limiting for admin users" classname="Skip Predicate &amp;gt; RateLimiterMiddleware" time="0.001" file="test/RateLimiterMiddleware.test.ts" line="230" assertions="1" />
      </testsuite>
      <testsuite name="Custom Cost" file="test/RateLimiterMiddleware.test.ts" line="257" tests="2" assertions="8" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should use custom cost per request (fixed)" classname="Custom Cost &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="258" assertions="4" />
        <testcase name="should use custom cost per request (function)" classname="Custom Cost &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="283" assertions="4" />
      </testsuite>
      <testsuite name="Custom Messages and Status Codes" file="test/RateLimiterMiddleware.test.ts" line="310" tests="1" assertions="2" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should use custom message and status code" classname="Custom Messages and Status Codes &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="311" assertions="2" />
      </testsuite>
      <testsuite name="Per-Client Isolation" file="test/RateLimiterMiddleware.test.ts" line="336" tests="1" assertions="4" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should maintain separate buckets for different clients" classname="Per-Client Isolation &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="337" assertions="4" />
      </testsuite>
      <testsuite name="Bucket Management" file="test/RateLimiterMiddleware.test.ts" line="360" tests="3" assertions="5" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should get bucket state for debugging" classname="Bucket Management &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="361" assertions="3" />
        <testcase name="should clear all buckets" classname="Bucket Management &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="376" assertions="1" />
        <testcase name="should destroy cleanup timer" classname="Bucket Management &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="393" assertions="1" />
      </testsuite>
      <testsuite name="Edge Cases" file="test/RateLimiterMiddleware.test.ts" line="405" tests="4" assertions="7" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should handle unknown IP gracefully" classname="Edge Cases &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="406" assertions="2" />
        <testcase name="should handle CF-Connecting-IP header" classname="Edge Cases &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="427" assertions="2" />
        <testcase name="should handle zero capacity gracefully" classname="Edge Cases &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="453" assertions="2" />
        <testcase name="should disable cleanup when cleanupInterval is 0" classname="Edge Cases &amp;gt; RateLimiterMiddleware" time="0" file="test/RateLimiterMiddleware.test.ts" line="465" assertions="1" />
      </testsuite>
    </testsuite>
  </testsuite>
  <testsuite name="test/HonoWebsocketAdapter.test.ts" file="test/HonoWebsocketAdapter.test.ts" tests="26" assertions="35" failures="0" skipped="0" time="0" hostname="Duffy">
    <testsuite name="HonoWebsocketAdapter - Enhanced Tests" file="test/HonoWebsocketAdapter.test.ts" line="15" tests="26" assertions="35" failures="0" skipped="0" time="0" hostname="Duffy">
      <testsuite name="Adapter Creation" file="test/HonoWebsocketAdapter.test.ts" line="16" tests="2" assertions="3" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should create an adapter instance" classname="Adapter Creation &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="17" assertions="2" />
        <testcase name="should set the logger instance" classname="Adapter Creation &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="25" assertions="1" />
      </testsuite>
      <testsuite name="WebSocket Registration" file="test/HonoWebsocketAdapter.test.ts" line="36" tests="6" assertions="10" failures="0" skipped="0" time="0.001" hostname="Duffy">
        <testcase name="should register WebSocket service" classname="WebSocket Registration &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0.001" file="test/HonoWebsocketAdapter.test.ts" line="37" assertions="1" />
        <testcase name="should throw error for null service" classname="WebSocket Registration &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="53" assertions="1" />
        <testcase name="should throw error for missing namespace" classname="WebSocket Registration &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="62" assertions="1" />
        <testcase name="should throw error for invalid namespace format" classname="WebSocket Registration &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="76" assertions="1" />
        <testcase name="should warn on duplicate namespace registration" classname="WebSocket Registration &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="91" assertions="1" />
        <testcase name="should accept valid namespace formats" classname="WebSocket Registration &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="113" assertions="5" />
      </testsuite>
      <testsuite name="Connection Management" file="test/HonoWebsocketAdapter.test.ts" line="133" tests="4" assertions="4" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should set connection limit" classname="Connection Management &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="134" assertions="1" />
        <testcase name="should throw error for invalid connection limit" classname="Connection Management &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="143" assertions="1" />
        <testcase name="should get connection count" classname="Connection Management &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="152" assertions="1" />
        <testcase name="should shutdown gracefully" classname="Connection Management &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="161" assertions="1" />
      </testsuite>
      <testsuite name="WebSocket Preparation" file="test/HonoWebsocketAdapter.test.ts" line="171" tests="6" assertions="9" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should prepare WebSocket handlers" classname="WebSocket Preparation &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="172" assertions="4" />
        <testcase name="should skip most preparation if no websockets registered" classname="WebSocket Preparation &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="193" assertions="1" />
        <testcase name="should accept custom WS options" classname="WebSocket Preparation &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="204" assertions="1" />
        <testcase name="should prepare WebSocket with drain handler" classname="WebSocket Preparation &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="228" assertions="1" />
        <testcase name="should prepare WebSocket with ping handler" classname="WebSocket Preparation &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="246" assertions="1" />
        <testcase name="should prepare WebSocket with pong handler" classname="WebSocket Preparation &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="264" assertions="1" />
      </testsuite>
      <testsuite name="Heartbeat Management" file="test/HonoWebsocketAdapter.test.ts" line="283" tests="2" assertions="2" failures="0" skipped="0" time="0" hostname="Duffy">
        <testcase name="should start and track heartbeat" classname="Heartbeat Management &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="284" assertions="1" />
        <testcase name="should stop heartbeat when connection closes" classname="Heartbeat Management &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="301" assertions="1" />
      </testsuite>
      <testsuite name="Error Handling" file="test/HonoWebsocketAdapter.test.ts" line="319" tests="6" assertions="7" failures="0" skipped="0" time="0.001" hostname="Duffy">
        <testcase name="should handle missing WebSocket service gracefully" classname="Error Handling &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="320" assertions="1" />
        <testcase name="should handle handler errors" classname="Error Handling &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="346" assertions="1" />
        <testcase name="should close connection on critical handler errors" classname="Error Handling &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="377" assertions="1" />
        <testcase name="should handle send error in error handler" classname="Error Handling &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0.001" file="test/HonoWebsocketAdapter.test.ts" line="407" assertions="1" />
        <testcase name="should handle connection limit reached" classname="Error Handling &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="439" assertions="2" />
        <testcase name="should not call handler if handler is missing" classname="Error Handling &amp;gt; HonoWebsocketAdapter - Enhanced Tests" time="0" file="test/HonoWebsocketAdapter.test.ts" line="473" assertions="1" />
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>
